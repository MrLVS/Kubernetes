---
# Source: application/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-devops-application-be
  labels:
    helm.sh/chart: application-1.0.0
    app.kubernetes.io/name: devops-application-be
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: devops-application-be
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-devops-application-be
  labels:
    helm.sh/chart: application-1.0.0
    app.kubernetes.io/name: devops-application-be
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: Rexreate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: devops-application-be
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      annotations:
        checksum/config: b27d779418ae4c931776754574e54b5c40f8195d9dff4aede7c86b9dfad9968a
        checksum/secret: 275726bcd474c24992477e6f76f3556d228060e3eb3e236ced46d21246b534e3
      labels:
        app.kubernetes.io/name: devops-application-be
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      imagePullSecrets:
        - name: artifactory
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: RELEASE-NAME-devops-application-be
          command:
            - "python3"
          args:
            - "app.py"
          lifecycle:
            preStop:
              exec:
                command:
                  - "python3"
                  - "graceful_shutdown.py"
          workingDir: /app
          securityContext:
            capabilities:
              drop:
              - ALL
          image: "application_backend/master:1.10.27"
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: RELEASE-NAME-devops-application-be
            - secretRef:
                name: RELEASE-NAME-devops-application-be
          env:
            - name: STORE_DATABASE_URI
              value: "postgresql+asyncpg://$(STORE_DATABASE_USERNAME):$(STORE_DATABASE_PASSWORD)@$(STORE_DATABASE_HOST):$(STORE_DATABASE_PORT)/$(STORE_DATABASE_NAME)"
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            tcpSocket:
              port: 8080
          readinessProbe:
            tcpSocket:
              port: 8080
          resources:
            requests:
              cpu: 10m
              memory: 250Mi
            limits:
              cpu: 10m
              memory: 250Mi
          volumeMounts:
            - name: "RELEASE-NAME-devops-application-be-config"
              mountPath: /app/config.yaml
              subPath: config.yaml
      volumes:
        - name: "RELEASE-NAME-devops-application-be-config"
          configMap:
            name: "RELEASE-NAME-devops-application-be-config"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: worker-group
                operator: In
                values:
                - applications
---
# Source: application/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: RELEASE-NAME-devops-application-be
  labels:
    helm.sh/chart: application-1.0.0
    app.kubernetes.io/name: devops-application-be
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - "application.com"
      secretName: https-certs
  rules:
    - host: "application.com"
      http:
        paths:
          - path: /api
            backend:
              serviceName: RELEASE-NAME-devops-application-be
              servicePort: 80
          - path: /graphql
            backend:
              serviceName: RELEASE-NAME-devops-application-be
              servicePort: 80
---
# Source: application/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-devops-application-be
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-1"
stringData:
  STORE_DATABASE_PASSWORD: "123"
  STORE_DATABASE_USERNAME: "postgres"
  STORE_KEYCLOAK_ADMIN_PASSWORD: "admin"
  STORE_KEYCLOAK_ADMIN_USERNAME: "admin"
  STORE_KEYCLOAK_CLIENT_SECRET_KEY: "123"
type: Opaque
---
# Source: application/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-devops-application-be
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-1"
data:
  STORE_DATABASE_PORT: "5432"
  STORE_ENVIRONMENT: "production"
  STORE_HOSTNAME: "0.0.0.0"
  STORE_KEYCLOAK_CACHE_ENABLED: "true"
  STORE_KEYCLOAK_CACHE_TIMEOUT: "300"
  STORE_KEYCLOAK_CLIENT_ID: "application"
  STORE_KEYCLOAK_REALM_NAME: "application"
  STORE_MAIL_PORT: "25"
  STORE_MAIL_SEND: "true"
  STORE_MAIL_TEST: "false"
  STORE_PORT: "8080"
  DB_POOL_MAX_CONNECTIONS: "20"
  DB_POOL_MIN_CONNECTIONS: "5"
  PYTHONBUFFERED: "1"
  PYTHONPATH: "/app"
  REDIS_URL: "redis://redis-master.redis:6379/0"
  REQUESTS_CA_BUNDLE: "/etc/ssl/certs"
  WEB_CONCURRENCY: "4"
---
# Source: application/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-devops-application-be-config"
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-1"
data:
  config.yaml: |
    mytext
---
# Source: application/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-devops-application-be-test-connection"
  labels:
    helm.sh/chart: application-1.0.0
    app.kubernetes.io/name: devops-application-be
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-devops-application-be']
      resources:
        requests:
          cpu: 10m
          memory: 250Mi
        limits:
          cpu: 10m
          memory: 250Mi
  restartPolicy: Never
---
# Source: application/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "RELEASE-NAME-devops-application-be-migrations"
  labels:
    helm.sh/chart: application-1.0.0
    app.kubernetes.io/name: devops-application-be
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "1"
spec:
  backoffLimit: 0
  template:
    spec:
      imagePullSecrets:
        - name: artifactory
        - name: artifactory
      containers:
        - name: "RELEASE-NAME-devops-application-be-migrations"
          image: "application_backend/devops_master:1.10.27"
          imagePullPolicy: Always
          command:
            - /bin/sh
            - -c
          args:
            - |
              alembic upgrade head
              python3 store/scripts/initial_data.py
          envFrom:
            - configMapRef:
                name: RELEASE-NAME-devops-application-be
            - secretRef:
                name: RELEASE-NAME-devops-application-be
          env:
            - name: STORE_DATABASE_URI
              value: "postgresql+asyncpg://$(STORE_DATABASE_USERNAME):$(STORE_DATABASE_PASSWORD)@$(STORE_DATABASE_HOST):$(STORE_DATABASE_PORT)/$(STORE_DATABASE_NAME)"
          resources:
            requests:
              cpu: 10m
              memory: 250Mi
            limits:
              cpu: 10m
              memory: 250Mi
          volumeMounts:
            - name: "RELEASE-NAME-devops-application-be-config"
              mountPath: /app/config.yaml
              subPath: config.yaml
      restartPolicy: Never
      volumes:
        - name: "RELEASE-NAME-devops-application-be-config"
          configMap:
            name: "RELEASE-NAME-devops-application-be-config"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: worker-group
                operator: In
                values:
                - applications
---
# Source: application/templates/cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: RELEASE-NAME-myappui
  labels:
    helm.sh/chart: myappui-0.1.0
    app.kubernetes.io/name: myappui
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "0 */1 * * *"
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          annotations:
            checksum/config: 881acf26b3dd77fa6d636a76f9216adbf69362f96f57014b61edef6bebec7a8b
        spec:
          imagePullSecrets:
            - name: artifactory
            - name: artifactory
          securityContext:
            {}
          volumes:
          - name: RELEASE-NAME-myappui-uwsgi
            configMap:
              name: RELEASE-NAME-myappui-uwsgi
          restartPolicy: Never
          containers:
            - name: myappui-scidb-sync
              securityContext:
                capabilities:
                  drop:
                  - ALL
                runAsNonRoot: true
                runAsUser: 1000
              image: "myapp-dev:3.9.7"
              command: ["/bin/sh", "-c"]
              args:
                - |
                  python3 -m pymyapp
              imagePullPolicy: IfNotPresent
              envFrom:
              - configMapRef:
                  name: RELEASE-NAME-myappui
              - secretRef:
                  name: RELEASE-NAME-myappui
              ports:
                - containerPort: 8081
                  name: http
              resources:
                requests:
                  cpu: 10m
                  memory: 300Mi
              volumeMounts:
              - mountPath: /app/pymyappUI.ini
                name: RELEASE-NAME-myappui-uwsgi
                subPath: pymyappUI.ini
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: worker-group
                    operator: In
                    values:
                    - applications
